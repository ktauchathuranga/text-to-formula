name: Deploy to Maven Central

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up JDK 22
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: '22'
          distribution: 'temurin'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Step 4: Extract version from pom.xml
      - name: Extract project version
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        env:
          MAVEN_OPTS: '-DskipTests'

      # Step 5: Fetch latest version from Maven Central
      - name: Fetch latest Maven Central version
        id: latest_version
        run: |
          LATEST_VERSION=$(curl -s "https://search.maven.org/solrsearch/select?q=g:io.github.ktauchathuranga+AND+a:text-to-formula&core=gav&rows=1&wt=json" | jq -r '.response.docs[0].v // "0.0.0"')
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      # Step 6: Compare versions
      - name: Compare versions
        id: compare_versions
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.version }}
          LATEST_VERSION=${{ steps.latest_version.outputs.latest_version }}
          # Remove -SNAPSHOT suffix for comparison if present
          CURRENT_VERSION_CLEAN=$(echo "$CURRENT_VERSION" | sed 's/-SNAPSHOT//')
          # Compare versions using sort -V
          HIGHEST_VERSION=$(echo -e "$CURRENT_VERSION_CLEAN\n$LATEST_VERSION" | sort -V | tail -n1)
          if [ "$CURRENT_VERSION_CLEAN" = "$HIGHEST_VERSION" ] && [ "$CURRENT_VERSION_CLEAN" != "$LATEST_VERSION" ]; then
            echo "is_newer=true" >> $GITHUB_OUTPUT
          else
            echo "is_newer=false" >> $GITHUB_OUTPUT
          fi

      # Step 7: Set up GPG key
      - name: Import GPG key
        if: steps.compare_versions.outputs.is_newer == 'true'
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}
        run: |
          mkdir -p ~/.gnupg
          echo "$GPG_KEY" | base64 --decode | gpg --homedir ~/.gnupg --import --no-tty --batch --yes
          echo "GPG key imported successfully"

      # Step 8: Deploy to Maven Central
      - name: Deploy to Maven Central
        if: steps.compare_versions.outputs.is_newer == 'true'
        env:
          CENTRAL_USERNAME: ${{ secrets.CENTRAL_USERNAME }}
          CENTRAL_PASSWORD: ${{ secrets.CENTRAL_PASSWORD }}
          GPG_KEYNAME: ${{ secrets.GPG_KEYNAME }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          mvn clean deploy -P ossrh -DskipTests --settings .github/settings.xml

      # Step 9: Notify on failure
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: 'ðŸš¨ Deployment to Maven Central failed. Please check the workflow logs for details.'
            })